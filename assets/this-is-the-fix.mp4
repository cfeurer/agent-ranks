<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Agent Ranks — Results-Based, Private Agent Matching</title>
<!-- Staging privacy; remove when production-ready -->
<meta name="robots" content="noindex,nofollow">
<style>
  :root{
    --ink:#0F172A; --muted:#475569; --border:#E2E8F0; --soft:#F8FAFC; --bg:#FFFFFF;
    --navy:#0B1F3B; --gold:#C49A6C; --success:#065f46; --warn:#b45309; --err:#b91c1c;
    --shadow:0 1px 2px rgba(0,0,0,.06), 0 2px 8px rgba(0,0,0,.06);
    --radius:14px;
  }
  *{box-sizing:border-box} html,body{height:100%}
  body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;color:var(--ink);background:var(--bg)}
  a{color:var(--ink);text-decoration:none}
  .container{max-width:1100px;margin:0 auto;padding:0 16px}
  .btn{background:var(--ink);color:#fff;border:0;border-radius:12px;padding:10px 14px;font-weight:700;cursor:pointer}
  .btn-outline{background:#fff;color:var(--ink);border:1px solid var(--border);border-radius:12px;padding:10px 14px;font-weight:700;cursor:pointer}
  .card{background:#fff;border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow)}
  .section{padding:48px 0}
  .h1{font-size:40px;line-height:1.1;font-weight:800;letter-spacing:-.02em}
  .h2{font-size:28px;font-weight:800;letter-spacing:-.02em}
  .h3{font-size:16px;font-weight:800}
  .muted{color:var(--muted)}
  .row{display:grid;grid-template-columns:1fr;gap:16px}
  @media(min-width:720px){ .row-2{grid-template-columns:1.2fr .8fr} .row-3{grid-template-columns:repeat(3,1fr)} }
  header{position:sticky;top:0;background:rgba(255,255,255,.9);backdrop-filter:blur(8px);border-bottom:1px solid var(--border);z-index:50}
  nav a{margin-right:16px;font-size:14px}
  .pill{display:inline-flex;padding:6px 12px;border-radius:999px;border:1px solid rgba(17,24,39,.15);background:rgba(17,24,39,.03);font-size:12px;font-weight:700}
  .hero-visual{height:360px;border-radius:16px;border:1px solid var(--border);overflow:hidden;position:relative}
  .progress{height:8px;width:180px;background:#f1f5f9;border-radius:999px;overflow:hidden}
  .progress>div{height:100%;background:var(--ink)}
  .grid-2{display:grid;grid-template-columns:1fr;gap:12px}
  @media(min-width:700px){ .grid-2{grid-template-columns:repeat(2,1fr)} }
  .grid-3{display:grid;grid-template-columns:1fr;gap:12px}
  @media(min-width:700px){ .grid-3{grid-template-columns:repeat(3,1fr)} }
  .list{list-style:disc;padding-left:18px}
  .small{font-size:12px}.xsmall{font-size:11px;color:#64748b}
  .pillbar{display:flex;gap:8px;flex-wrap:wrap}
  .choice{padding:12px;border:1px solid var(--border);border-radius:12px;background:#fff;text-align:left;cursor:pointer}
  .choice.selected{border-color:var(--ink);background:#111827;color:#fff}
  .choice.selected .muted{color:#e5e7eb}
  .hidden{display:none}
  .footer{border-top:1px solid var(--border);background:#fff}

  /* Staging passphrase gate */
  #gate{position:fixed;inset:0;background:linear-gradient(180deg,#f8fafc,#eef2ff);display:flex;align-items:center;justify-content:center;padding:24px;z-index:9999}
  #gate .panel{max-width:420px;width:100%;background:#fff;border:1px solid var(--border);border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,.08);padding:20px}
  .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border:0}

  /* Modal */
  .modal.hidden,[aria-hidden="true"].modal{display:none!important}
  .modal{position:fixed;inset:0;background:rgba(0,0,0,.5);display:flex;align-items:center;justify-content:center;padding:16px;z-index:100}

  /* Badges */
  .badge{display:inline-block;font-size:11px;padding:2px 8px;border-radius:999px;margin-left:8px}
  .badge.signed{background:#e6f6ee;color:#065f46;border:1px solid #93e0b3}
  .badge.pending{background:#fff7ed;color:#b45309;border:1px solid #fdba74}

  /* Mobile nav */
  #menu-btn{display:none}
  @media(max-width:700px){ .nav-links{display:none!important} #menu-btn{display:inline-flex!important} }
  .mobile-nav{display:none}
</style>
</head>
<body>

<!-- PASSCODE GATE (staging only; remove if not needed) -->
<div id="gate" role="dialog" aria-labelledby="gateTitle" aria-modal="true">
  <div class="panel">
    <h1 id="gateTitle" class="h2" style="margin:0 0 8px">Agent Ranks — Staging Access</h1>
    <p class="xsmall">Enter the passphrase provided to you.</p>
    <form id="gateForm" style="margin-top:8px">
      <label for="pass" class="sr-only">Passphrase</label>
      <input id="pass" name="pass" type="password" autocomplete="current-password"
             style="width:100%;padding:10px 12px;border:1px solid var(--border);border-radius:10px" required>
      <div class="xsmall" style="margin:6px 0 12px">Hint: change <code>window.AGENT_RANKS_PASS</code> in the script.</div>
      <button class="btn" type="submit" aria-label="Unlock site">Unlock</button>
    </form>
    <p id="gateMsg" class="xsmall" style="margin-top:10px;color:var(--err)"></p>
  </div>
</div>

<!-- HEADER -->
<header>
  <div class="container" style="display:flex;align-items:center;justify-content:space-between;padding:14px 16px;">
    <div style="display:flex;align-items:center;gap:10px;">
      <strong class="brand-name" style="font-size:1.3em">Agent Ranks</strong>
    </div>
    <nav id="topnav" class="nav-links" aria-label="Primary">
      <a href="#how">How it works</a>
      <a href="#about">About</a>
      <a href="#questionnaire">Get matched</a>
      <a href="#results">Results</a>
      <a href="#admin">Data (CSV)</a>
    </nav>
    <div style="display:flex;align-items:center;gap:8px;">
      <a href="#questionnaire" class="btn">Start</a>
      <button id="menu-btn" class="btn btn-outline" aria-controls="mobile-nav" aria-expanded="false" aria-label="Open menu">Menu</button>
    </div>
  </div>
  <div id="mobile-nav" class="mobile-nav" role="region" aria-label="Mobile navigation">
    <div class="container" style="padding:8px 16px;display:grid;gap:10px;border-top:1px solid var(--border)">
      <a href="#how">How it works</a>
      <a href="#about">About</a>
      <a href="#questionnaire">Get matched</a>
      <a href="#results">Results</a>
      <a href="#admin">Data (CSV)</a>
    </div>
  </div>
</header>

<!-- HERO (seamless self-hosted video) -->
<section class="section" style="padding-top:32px;padding-bottom:28px;">
  <div class="container row row-2">
    <div>
      <span class="pill">Results-Based • No Pay-to-Play</span>
      <h1 class="h1" style="margin-top:12px;">The system was broken.<br>This is the fix.</h1>
      <p class="muted" style="margin-top:8px;max-width:600px">
        Some agents sell faster. Some negotiate better. Agent Ranks matches you with specialists proven to deliver results — in your price point, property type, and neighborhood.
      </p>
      <div style="display:flex;gap:10px;margin-top:16px">
        <a class="btn" href="#questionnaire">Start My Match</a>
        <a class="btn btn-outline" href="#how">How It Works</a>
      </div>
    </div>
    <div class="hero-visual" style="border:none;box-shadow:var(--shadow);">
      <video id="heroVideo"
             src="assets/this-is-the-fix.mp4"
             autoplay muted playsinline loop preload="metadata"
             style="width:100%;height:100%;object-fit:cover;border-radius:16px">
        Sorry, your browser doesn’t support embedded videos.
      </video>
    </div>
  </div>
</section>

<!-- HOW IT WORKS -->
<section id="how" class="section" style="padding-top:28px;">
  <div class="container">
    <h2 class="h2">How it works</h2>
    <p class="muted" style="margin-top:6px">
      Some agents are simply better at certain kinds of transactions. They sell faster when listing and negotiate stronger when buying.
      Until now, the system hid that. Agent Ranks fixes it.
    </p>
    <div class="row row-3" style="margin-top:16px">
      <div class="card" style="padding:18px;"><div class="pill">1</div><div class="h3" style="margin-top:8px">Tell us your goals</div><div class="small muted">Buyer or seller, area, property type, price, timing, priorities.</div></div>
      <div class="card" style="padding:18px;"><div class="pill">2</div><div class="h3" style="margin-top:8px">Data-driven matching</div><div class="small muted">We score 50+ factors to find agents most likely to achieve your outcome.</div></div>
      <div class="card" style="padding:18px;"><div class="pill">3</div><div class="h3" style="margin-top:8px">Anonymous introductions</div><div class="small muted">Review top matches without exposing identity or contact info.</div></div>
      <div class="card" style="padding:18px;"><div class="pill">4</div><div class="h3" style="margin-top:8px">Mutual opt-in & connect</div><div class="small muted">When both sides say yes, we connect you directly. Results-based, no pay-to-play.</div></div>
    </div>
  </div>
</section>

<!-- ABOUT -->
<section id="about" class="section" style="background:#f9fafb">
  <div class="container row row-2">
    <div>
      <h2 class="h2">About Agent Ranks</h2>
      <p class="muted" style="margin-top:6px;max-width:640px">
        The system was broken. Too many people chose agents based on ads, not results. Agent Ranks fixes this with data.
      </p>
      <ul class="list" style="margin-top:12px">
        <li>Faster sales when listing a home</li>
        <li>Stronger negotiation when buying</li>
        <li>Proven success in your price point and neighborhood</li>
      </ul>
      <p class="xsmall muted" style="margin-top:10px">No ads. No pay-to-play. Results only.</p>
      <a href="#questionnaire" class="btn" style="margin-top:16px">Start My Match</a>
    </div>
    <div class="card" style="padding:16px">
      <h3 class="h3">How we rank agents</h3>
      <ul class="list small" style="margin-top:10px">
        <li>Neighborhood experience</li>
        <li>Price point track record</li>
        <li>Property type specialization</li>
        <li>List-to-close & days on market</li>
        <li>Negotiation strength for buyers</li>
        <li>Client ratings (pilot)</li>
      </ul>
      <p class="xsmall muted" style="margin-top:10px">Agents cannot pay to appear higher. Matches are based only on performance data.</p>
    </div>
  </div>
</section>

<!-- QUESTIONNAIRE -->
<section id="questionnaire" class="section">
  <div class="container">
    <h2 class="h2">Get matched in under 2 minutes</h2>
    <p class="muted">We only share anonymized needs until you choose to connect.</p>

    <div class="card" style="margin-top:14px;padding:16px">
      <div style="display:flex;align-items:center;justify-content:space-between">
        <div class="xsmall">Step <span id="step-num">1</span> of 6</div>
        <div class="progress"><div id="progress-bar" style="width:16.66%"></div></div>
      </div>

      <div id="step-0" style="margin-top:12px">
        <div class="h3">Are you buying or selling?</div>
        <div class="grid-2" style="margin-top:10px">
          <button class="choice" data-role="Buyer"><div class="h3">Buyer</div><div class="small muted">We’ll prioritize negotiation and availability.</div></button>
          <button class="choice" data-role="Seller"><div class="h3">Seller</div><div class="small muted">We’ll prioritize marketing power and days-on-market.</div></button>
        </div>
      </div>

      <div id="step-1" class="hidden" style="margin-top:12px">
        <div class="h3">What neighborhood or area?</div>
        <input id="input-location" class="input" placeholder="e.g., West Loop, Lincoln Park, North Shore"
               style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px;font-size:14px">
        <div class="xsmall" style="margin-top:6px">Tip: Be specific or broader—both work.</div>
      </div>

      <div id="step-2" class="hidden" style="margin-top:12px">
        <div class="h3">Property type</div>
        <div class="grid-3" style="margin-top:10px" id="property-types"></div>
      </div>

      <div id="step-3" class="hidden" style="margin-top:12px">
        <div class="h3">Price range</div>
        <div class="grid-2" style="margin-top:10px">
          <div><div class="xsmall">Min</div><input id="price-min" type="number" class="input" value="400000"
            style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px;font-size:14px"></div>
          <div><div class="xsmall">Max</div><input id="price-max" type="number" class="input" value="1000000"
            style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px;font-size:14px"></div>
        </div>
        <div class="xsmall" style="margin-top:6px">Change later if you’re uncertain.</div>
      </div>

      <div id="step-4" class="hidden" style="margin-top:12px">
        <div class="h3">What matters most?</div>
        <div id="priorities" class="grid-2" style="margin-top:10px"></div>
      </div>

      <div id="step-5" class="hidden" style="margin-top:12px">
        <div class="h3">Timing</div>
        <div class="grid-3" style="margin-top:10px">
          <button class="choice timing" data-val="0-3 months">0-3 months</button>
          <button class="choice timing" data-val="3-6 months">3-6 months</button>
          <button class="choice timing" data-val="6-12 months">6-12 months</button>
        </div>
      </div>

      <div style="display:flex;justify-content:space-between;align-items:center;margin-top:14px">
        <button class="btn btn-outline" id="btn-back">Back</button>
        <button class="btn" id="btn-next">Next</button>
        <button class="btn hidden" id="btn-finish">See my matches</button>
      </div>
      <div class="xsmall" style="margin-top:8px">Your details remain private. We only open a chat if you approve your matches and the agent agrees.</div>
    </div>
  </div>
</section>

<!-- RESULTS -->
<section id="results" class="section hidden">
  <div class="container">
    <h2 class="h2">Your best-fit matches</h2>
    <p class="muted">We highlight the top three based on your goals. You can still browse up to ten options.</p>
    <div id="top3" class="row row-3" style="margin-top:16px"></div>
    <div style="margin-top:28px">
      <div class="h3">Other relevant options</div>
      <div id="rest" class="row row-3" style="margin-top:12px"></div>
    </div>
    <div class="card" style="margin-top:24px;padding:12px;background:#f8fafc">
      <p class="small muted" style="margin:0">
        No ads. No pay-to-play. Just results you can count on. Rankings are based only on data — faster sales, stronger negotiation, and proven success in your price point and neighborhood.
      </p>
    </div>
  </div>
</section>

<!-- ADMIN: DATA (CSV IMPORT) -->
<section id="admin" class="section">
  <div class="container">
    <h2 class="h2">Data (CSV import)</h2>
    <p class="muted">Copy from Excel/Sheets (including header) and paste, or upload a .csv/.tsv file, then click Import.</p>
    <div class="card" style="padding:16px;margin-top:12px">
      <div class="small">Header (min required):
        <code>id, alias, neighborhoods (;), propertyTypes (;), priceMin, priceMax, focus, marketing, negotiation, transactions12m, resources (;), brokerageMarketing, domVsArea, spLpVsArea, buyDiscountVsArea</code>
        &nbsp;Optional: <code>agreementSigned</code> (Yes/No)
      </div>
      <div class="grid-2" style="margin-top:12px">
        <div>
          <div class="xsmall">Upload .csv/.tsv</div>
          <input type="file" id="csv-file" accept=".csv,.tsv,text/csv,text/tab-separated-values" style="width:100%;margin-top:6px">
          <div id="file-note" class="xsmall" style="margin-top:6px"></div>
        </div>
        <div>
          <div class="xsmall">…or paste here</div>
          <textarea id="csv-text" rows="8" class="textarea" style="margin-top:6px;width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px;font-family:ui-monospace,Menlo,Consolas,monospace;font-size:12px"
placeholder="id,alias,neighborhoods,propertyTypes,priceMin,priceMax,focus,marketing,negotiation,transactions12m,resources,brokerageMarketing,domVsArea,spLpVsArea,buyDiscountVsArea,agreementSigned
X1,West Loop Condo Pro,West Loop;River North,Condo;Loft,600000,1600000,Seller,5,3,48,3D Tours;Broker Events;Pro Video,5,-8,1.1,0,Yes
X2,North Shore Seller Strategist,Winnetka;Glencoe;Evanston;Wilmette,Single Family,900000,3500000,Seller,5,4,34,Staging;Aerial Video;Broker Network,5,-8,1.3,0,Yes
X3,First-Time Buyer Guide,Lincoln Square;Ravenswood;Logan Square,Condo;Townhome,300000,800000,Buyer,3,5,38,Lender Intros;Buyer Workshops,4,0,0,1.0,Yes"></textarea>
        </div>
      </div>
      <div style="display:flex;gap:8px;align-items:center;margin-top:10px">
        <button id="btn-load-sample" class="btn btn-outline">Load sample</button>
        <button id="btn-import" class="btn">Import</button>
        <span id="status" class="xsmall" aria-live="polite"></span>
      </div>

      <div class="grid-2" style="margin-top:14px">
        <div>
          <div class="h3">Preview (first 500 rows)</div>
          <div style="max-height:320px;overflow:auto;border:1px solid var(--border);border-radius:10px">
            <table aria-label="Parsed table" style="width:100%;border-collapse:collapse">
              <thead id="thead"></thead><tbody id="tbody"></tbody>
            </table>
          </div>
        </div>
        <div>
          <div class="h3">Row-level Errors</div>
          <div style="max-height:320px;overflow:auto;border:1px solid var(--border);border-radius:10px">
            <table aria-label="Row errors" style="width:100%;border-collapse:collapse">
              <thead><tr><th class="xsmall">#</th><th class="xsmall">Message</th><th class="xsmall">Sample</th></tr></thead>
              <tbody id="errbody"></tbody>
            </table>
          </div>
        </div>
      </div>

    </div>
  </div>
</section>

<!-- CHAT MODAL -->
<div id="chat-modal" class="modal hidden" aria-hidden="true">
  <div class="card" role="dialog" aria-modal="true" style="width:min(720px,100%);max-height:80vh;display:flex;flex-direction:column">
    <div style="display:flex;align-items:center;justify-content:space-between;padding:12px 16px;border-bottom:1px solid var(--border)">
      <div><div class="xsmall">Anonymous chat</div><div class="h3" id="chat-title">Agent</div></div>
      <button class="btn btn-outline" id="chat-close">Close</button>
    </div>
    <div id="chat-messages" style="padding:12px;overflow:auto;height:50vh"></div>
    <div style="display:flex;gap:8px;padding:12px;border-top:1px solid var(--border)">
      <input id="chat-input" class="input" placeholder="Type a message…"
             style="flex:1;border:1px solid var(--border);border-radius:12px;padding:10px 12px">
      <button class="btn" id="chat-send">Send</button>
    </div>
    <div class="xsmall" style="padding:10px 12px;border-top:1px solid var(--border)">
      You are anonymous. No names or contact details are shared until you choose to reveal them.
    </div>
  </div>
</div>

<!-- PRIVACY GATE (identity before first chat) -->
<div id="privacy-gate" class="modal hidden" aria-hidden="true">
  <div class="card" role="dialog" aria-modal="true" style="width:min(560px,100%);max-height:80vh;display:flex;flex-direction:column">
    <div style="display:flex;align-items:center;justify-content:space-between;padding:12px 16px;border-bottom:1px solid var(--border)">
      <div>
        <div class="h3">We’ll protect your privacy</div>
        <div class="xsmall muted">To open your private chat, we need your details to create a Protected Lead ID. We <strong>never share</strong> these with agents—only you can.</div>
      </div>
      <button class="btn btn-outline" id="pg-close">Close</button>
    </div>
    <form id="pg-form" style="padding:16px;display:grid;gap:10px">
      <label class="small">Full name
        <input id="pg-name" required class="input" placeholder="Jane Doe"
               style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px">
      </label>
      <label class="small">Email
        <input id="pg-email" required type="email" class="input" placeholder="jane@email.com"
               style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px">
      </label>
      <label class="small">Mobile phone
        <input id="pg-phone" required type="tel" class="input" placeholder="(555) 555-5555"
               style="width:100%;border:1px solid var(--border);border-radius:12px;padding:10px 12px">
      </label>
      <label class="small" style="display:flex;gap:8px;align-items:flex-start;margin-top:6px">
        <input id="pg-consent" required type="checkbox">
        <span>I understand Agent Ranks will <strong>not share my identity</strong> with agents. I may reveal it later if I choose.</span>
      </label>
      <div style="display:flex;gap:10px;margin-top:6px">
        <button type="submit" class="btn">Start my anonymous chat</button>
        <button type="button" class="btn btn-outline" id="pg-cancel">Cancel</button>
      </div>
      <div id="pg-error" class="xsmall" style="color:var(--err)"></div>
    </form>
  </div>
</div>

<footer class="footer">
  <div class="container" style="display:flex;align-items:center;justify-content:space-between;padding:16px 0">
    <div class="xsmall">© <span id="year"></span> Agent Ranks — Demo Concept</div>
    <div class="xsmall"><a href="#how">How it works</a> · <a href="#about">About</a> · <a href="#questionnaire">Get matched</a> · <a href="#results">Results</a> · <a href="#admin">Data</a></div>
  </div>
</footer>

<script>
/* ===== CONFIG ===== */
window.AGENT_RANKS_PASS = "pilot-2025"; // change or remove with gate

/* Mobile nav (accessible) */
const menuBtn = document.getElementById('menu-btn');
const mobileNav = document.getElementById('mobile-nav');
menuBtn.onclick = () => {
  const open = mobileNav.style.display==='block' ? false : true;
  mobileNav.style.display = open ? 'block' : 'none';
  menuBtn.setAttribute('aria-expanded', String(open));
  menuBtn.setAttribute('aria-label', open ? 'Close menu' : 'Open menu');
};
window.addEventListener('keydown',(e)=>{ if(e.key==='Escape' && mobileNav.style.display==='block'){ mobileNav.style.display='none'; menuBtn.setAttribute('aria-expanded','false'); }});

/* Staging passphrase */
const gate = document.getElementById('gate');
document.getElementById('gateForm').addEventListener('submit',(e)=>{
  e.preventDefault();
  const val = document.getElementById('pass').value;
  if(val === window.AGENT_RANKS_PASS){ gate.remove(); }
  else { document.getElementById('gateMsg').textContent = 'Incorrect passphrase.'; }
});

/* Hero video pause when off-screen */
(() => {
  const v = document.getElementById('heroVideo');
  if (!v) return;
  const io = new IntersectionObserver(([e]) => {
    if (!e) return;
    if (e.isIntersecting) v.play().catch(()=>{});
    else v.pause();
  }, { threshold: 0.1 });
  io.observe(v);
})();

/* ===== Static progress badge (facts everywhere) ===== */
function createRankBadge(value, { size = 42 } = {}) {
  const v = Math.max(0, Math.min(100, Math.round(value)));
  const gid = 'g' + Math.random().toString(36).slice(2,7);
  const navy = '#0B1F3B', gold='#C49A6C', track='#E2E8F0', text='#0F172A';
  const stroke = Math.max(4, Math.round(size*0.18));
  const c = size/2, r=(size/2)-(stroke/2)-1;
  const C = 2*Math.PI*r, target = C*(1 - v/100);
  const fsz = Math.round(size*0.36);
  return `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" width="${size}" height="${size}" role="img" aria-label="Rank ${v}">
  <defs><linearGradient id="${gid}" x1="0%" y1="0%" x2="100%"><stop offset="0%" stop-color="${navy}"/><stop offset="100%" stop-color="${gold}"/></linearGradient></defs>
  <circle cx="${c}" cy="${c}" r="${r}" fill="#fff" stroke="${track}" stroke-width="${stroke}"/>
  <circle cx="${c}" cy="${c}" r="${r}" fill="none" stroke="url(#${gid})" stroke-width="${stroke}" stroke-linecap="round"
          stroke-dasharray="${C.toFixed(2)}" stroke-dashoffset="${target.toFixed(2)}"/>
  <text x="${c}" y="${c}" text-anchor="middle"
        font-family="system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial"
        font-weight="800" font-size="${fsz}" fill="${text}" dominant-baseline="middle">${v}</text>
</svg>`;
}

/* (Optional) motion badge for branding spots */
function createMotionBadge(value, { size = 64 } = {}) {
  const v = Math.max(0, Math.min(100, Math.round(value)));
  const gid = 'grad' + v + size + Math.random().toString(36).slice(2,7);
  const navy = '#0B1F3B', gold = '#C49A6C', track = '#E2E8F0', text = '#0F172A';
  const stroke = Math.max(4, Math.round(size*0.18));
  const r = (size/2) - (stroke/2) - 1;
  const fsz = Math.round(size*0.36);
  const c = size/2;
  return `
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${size} ${size}" width="${size}" height="${size}" role="img" aria-label="Rank ${v}">
  <defs><linearGradient id="${gid}" x1="0%" y1="0%" x2="100%"><stop offset="0%" stop-color="${navy}"/><stop offset="100%" stop-color="${gold}"/></linearGradient></defs>
  <style>
    .track{stroke:${track};stroke-width:${stroke};fill:none}
    .ring{stroke:url(#${gid});stroke-linecap:round;stroke-width:${stroke};fill:none;
          stroke-dasharray:${(2*Math.PI*r) - 6};stroke-dashoffset:0;
          transform-origin:${c}px ${c}px;animation:spin 6s linear infinite}
    @keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}
  </style>
  <circle class="track" cx="${c}" cy="${c}" r="${r}"/>
  <circle class="ring" cx="${c}" cy="${c}" r="${r}"/>
  <text x="${c}" y="${c}" class="score" style="font:800 ${fsz}px system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial;fill:${text};text-anchor:middle;dominant-baseline:middle">${v}</text>
</svg>`;
}

/* ===== Data & scoring ===== */
let AGENTS = [
  {id:'A1',alias:'North Side Neighborhood Pro',neighborhoods:['Lincoln Park','Lakeview','Bucktown','Wicker Park'],propertyTypes:['Condo','Single Family','Townhome'],priceMin:500000,priceMax:1500000,focus:'Seller',marketing:5,negotiation:4,transactions12m:42,resources:['Staging','Pro Video','Paid Social'],brokerageMarketing:5,domVsArea:-7,spLpVsArea:1.2,buyDiscountVsArea:0.1,agreementSigned:'Yes'},
  {id:'A2',alias:'Downtown High-Rise Specialist',neighborhoods:['West Loop','River North','Loop'],propertyTypes:['Condo','Loft'],priceMin:600000,priceMax:2000000,focus:'Seller',marketing:5,negotiation:3,transactions12m:55,resources:['3D Tours','In-Building Network','Broker Events'],brokerageMarketing:5,domVsArea:-9,spLpVsArea:0.8,buyDiscountVsArea:0.0,agreementSigned:'Yes'},
  {id:'A3',alias:'First-Time Buyer Guide',neighborhoods:['Lincoln Square','Ravenswood','Avondale','Logan Square'],propertyTypes:['Condo','Townhome'],priceMin:300000,priceMax:800000,focus:'Buyer',marketing:3,negotiation:5,transactions12m:38,resources:['Lender Intros','Buyer Workshops','Offer Playbooks'],brokerageMarketing:4,domVsArea:0,spLpVsArea:0.0,buyDiscountVsArea:1.0,agreementSigned:'Yes'},
  {id:'A4',alias:'Luxury Lakefront Team',neighborhoods:['Gold Coast','Streeterville','Old Town'],propertyTypes:['Condo','Single Family'],priceMin:1200000,priceMax:6000000,focus:'Seller',marketing:5,negotiation:4,transactions12m:29,resources:['International Network','Print Features','Private Showings'],brokerageMarketing:5,domVsArea:-6,spLpVsArea:1.6,buyDiscountVsArea:0.0,agreementSigned:'Yes'}
];

const METRICS = {
  neighborhood:{label:'Neighborhood specialization',weight:{Buyer:.22,Seller:.18}},
  productType:{label:'Product type fit',weight:{Buyer:.12,Seller:.12}},
  priceBand:{label:'Price band fit',weight:{Buyer:.12,Seller:.12}},
  roleFocus:{label:'Buyer/Seller focus',weight:{Buyer:.10,Seller:.10}},
  resources:{label:'Resources to achieve goals',weight:{Buyer:.18,Seller:.22}},
  brokerage:{label:'Brokerage marketing power',weight:{Buyer:.08,Seller:.12}},
  trackRecord:{label:'Success & track record',weight:{Buyer:.18,Seller:.14}}
};
function clamp(x,a=0,b=1){ return Math.max(a,Math.min(b,x)) }
function overlapRatio(range,aMin,aMax){
  const [pMin,pMax]=range||[0,0]; const inter=Math.max(0,Math.min(pMax,aMax)-Math.max(pMin,aMin));
  const uni=Math.max(pMax,aMax)-Math.min(pMin,aMin); return uni>0?inter/uni:0
}
function scoreAgent(agent,answers){
  const role=answers.role||'Buyer';
  const neighborhood=answers.location?(agent.neighborhoods||[]).some(n=>n.toLowerCase().includes(answers.location.toLowerCase()))?1:0:.5;
  const productType=answers.propertyType?((agent.propertyTypes||[]).includes(answers.propertyType)?1:0):.5;
  const priceBand=answers.priceRange?overlapRatio(answers.priceRange,agent.priceMin||0,agent.priceMax||0):.5;
  const roleFocus=answers.role?(answers.role===agent.focus?1:0):.5;
  const m=(agent.marketing||0)/5, n=(agent.negotiation||0)/5;
  const wantsM=(answers.priorities||[]).includes('Marketing Power'), wantsN=(answers.priorities||[]).includes('Negotiation Strength');
  const resources=role==='Seller'?clamp(.7*m+.3*n+(wantsM?.1:0)):clamp(.7*n+.3*m+(wantsN?.1:0));
  const brokerage=(agent.brokerageMarketing||0)/5;
  const activity=Math.min(agent.transactions12m||0,50)/50;
  const domScore=role==='Seller'?clamp(.5+(-(agent.domVsArea||0))/30):.5;
  const spLpScore=role==='Seller'?clamp(((agent.spLpVsArea||0)+3)/6):.5;
  const buyerDiscount=role==='Buyer'?clamp(((agent.buyDiscountVsArea||0)+2)/4):.5;
  const performance=role==='Seller'?clamp(.6*spLpScore+.4*domScore):buyerDiscount;
  const trackRecord=clamp(.6*performance+.4*activity);
  const raw={neighborhood,productType,priceBand,roleFocus,resources,brokerage,trackRecord};
  const parts=Object.entries(METRICS).map(([k,d])=>{ const w=d.weight[role], s=raw[k]??0; return {id:k,label:d.label,weight:w,score:s,points:Math.round(s*w*100)} });
  const total=parts.reduce((s,p)=>s+p.points,0);
  return { total, parts, raw }
}

/* ========= Privacy Gate & PLID ========= */
const PG = {
  el: document.getElementById('privacy-gate'),
  form: document.getElementById('pg-form'),
  name: document.getElementById('pg-name'),
  email: document.getElementById('pg-email'),
  phone: document.getElementById('pg-phone'),
  consent: document.getElementById('pg-consent'),
  err: document.getElementById('pg-error'),
  closeBtn: document.getElementById('pg-close'),
  cancelBtn: document.getElementById('pg-cancel')
};
function showPrivacyGate(){ PG.el.classList.remove('hidden'); PG.el.setAttribute('aria-hidden','false'); PG.name.focus(); }
function hidePrivacyGate(){ PG.el.classList.add('hidden'); PG.el.setAttribute('aria-hidden','true'); }
async function sha256(text){
  const enc = new TextEncoder().encode(text);
  const buf = await crypto.subtle.digest('SHA-256', enc);
  return Array.from(new Uint8Array(buf)).map(b=>b.toString(16).padStart(2,'0')).join('');
}
async function getOrCreatePLID(){
  let store = JSON.parse(localStorage.getItem('agent_ranks') || '{}');
  if(store.plid && store.client && store.client.verified){ return store.plid; }
  PG.err.textContent = '';
  if(!PG.name.value || !PG.email.value || !PG.phone.value || !PG.consent.checked){
    PG.err.textContent = 'Please complete all fields and confirm the checkbox.'; return null;
  }
  const now = new Date().toISOString();
  const raw = `${PG.name.value.trim()}|${PG.email.value.trim().toLowerCase()}|${PG.phone.value.trim()}|${now}`;
  const plid = await sha256(raw).then(h => 'plid_' + h.slice(0,16));
  store.client = {
    name: PG.name.value.trim(),
    email: PG.email.value.trim().toLowerCase(),
    phone: PG.phone.value.trim(),
    verified: true,
    createdAt: now
  };
  store.plid = plid;
  localStorage.setItem('agent_ranks', JSON.stringify(store));
  return plid;
}

/* ========= Questionnaire wiring ========= */
const state={role:'',location:'',propertyType:'',priceRange:[400000,1000000],priorities:[],timing:'0-3 months'};
const stepEls=[...Array(6)].map((_,i)=>document.getElementById('step-'+i));
const nextBtn=document.getElementById('btn-next'), backBtn=document.getElementById('btn-back'), finishBtn=document.getElementById('btn-finish');
const progressBar=document.getElementById('progress-bar'), stepNum=document.getElementById('step-num');
const PROPERTY_TYPES=['Condo','Single Family','Townhome','Loft','Multi-Unit'];
const PRIORITIES=['Local Expertise','Marketing Power','Negotiation Strength','New Construction Access','Off-Market Access'];
let step=0;
(function renderPropertyTypeButtons(){
  const holder=document.getElementById('property-types'); holder.innerHTML='';
  PROPERTY_TYPES.forEach(pt=>{ const b=document.createElement('button'); b.className='choice'; b.textContent=pt;
    b.onclick=()=>{ state.propertyType=pt; holder.querySelectorAll('.choice').forEach(x=>x.classList.remove('selected')); b.classList.add('selected') };
    holder.appendChild(b) })
})();
(function renderPriorityCheckboxes(){
  const holder=document.getElementById('priorities'); holder.innerHTML='';
  PRIORITIES.forEach(p=>{ const b=document.createElement('button'); b.className='choice'; b.textContent=p;
    b.onclick=()=>{ const i=state.priorities.indexOf(p); if(i>=0){ state.priorities.splice(i,1); b.classList.remove('selected') } else { state.priorities.push(p); b.classList.add('selected') } };
    holder.appendChild(b) })
})();
document.querySelectorAll('[data-role]').forEach(btn=>{
  btn.onclick=()=>{ state.role=btn.getAttribute('data-role'); document.querySelectorAll('[data-role]').forEach(x=>x.classList.remove('selected')); btn.classList.add('selected'); goStep(1) }
});
document.getElementById('input-location').oninput=(e)=>{ state.location=e.target.value||'' };
document.getElementById('price-min').oninput=(e)=>{ state.priceRange[0]=+e.target.value||0 };
document.getElementById('price-max').oninput=(e)=>{ state.priceRange[1]=+e.target.value||0 };
document.querySelectorAll('.timing').forEach(btn=>{
  btn.onclick=()=>{ state.timing=btn.getAttribute('data-val'); document.querySelectorAll('.timing').forEach(x=>x.classList.remove('selected')); btn.classList.add('selected') }
});
function goStep(n){
  step=n; stepEls.forEach((el,i)=>el.classList.toggle('hidden',i!==step));
  stepNum.textContent=(step+1); progressBar.style.width=((step+1)/6*100)+'%';
  backBtn.disabled=(step===0); nextBtn.classList.toggle('hidden',step===5); finishBtn.classList.toggle('hidden',step!==5)
}
backBtn.onclick=()=>{ if(step>0) goStep(step-1) };
nextBtn.onclick=()=>{ if(step<5) goStep(step+1) };
finishBtn.onclick=()=>{ document.getElementById('results').classList.remove('hidden'); window.location.hash='#results'; renderResults() };
goStep(0);

/* ===== Results render with Signed-first + floor 70 ===== */
function isSigned(agent){ const v=(agent.agreementSigned||'').toString().toLowerCase(); return v==='yes'||v==='y'||v==='true'||v==='1'; }
const SCORE_FLOOR = 70;

function renderResults(){
  const ranked = (AGENTS||[]).map(a=>{
    const score=scoreAgent(a,state);
    return { agent:a, score, bullets:buildNarrative(a,state), signed:isSigned(a) };
  }).sort((x,y)=> y.score.total-x.score.total);

  const aboveFloor = ranked.filter(r=> r.score.total>=SCORE_FLOOR);
  const pool = aboveFloor.length>=3 ? aboveFloor : ranked;

  const signed = pool.filter(r=>r.signed);
  const pending = pool.filter(r=>!r.signed);

  const top3 = [];
  for (const r of signed){ if(top3.length<3) top3.push(r); }
  for (const r of pending){ if(top3.length<3 && !top3.some(t=>!t.signed)) top3.push(r); }

  const restPool = pool.filter(r=> !top3.includes(r));
  const other = restPool.slice(0, Math.min(9, restPool.length));

  const topEl=document.getElementById('top3'); topEl.innerHTML='';
  const restEl=document.getElementById('rest'); restEl.innerHTML='';
  top3.forEach(r=> topEl.appendChild(renderAgentCard(r)));
  other.forEach(r=> restEl.appendChild(renderAgentSmall(r)));
}

function renderAgentCard(r){
  const wrap=document.createElement('div'); wrap.className='card'; wrap.style.padding='14px';
  const head=document.createElement('div'); head.style.display='flex'; head.style.justifyContent='space-between'; head.style.alignItems='center';
  const badge = r.signed ? '<span class="badge signed" title="Referral agreement on file">Verified</span>'
                         : '<span class="badge pending" title="Pending referral agreement">Pending</span>';
  head.innerHTML=`
    <div style="display:flex;align-items:center;gap:10px;">
      ${createRankBadge(r.score.total, { size: 42 })}
      <div>
        <div class="xsmall">Top Match</div>
        <div class="h3">${r.agent.alias}</div>
      </div>
    </div>
    <div style="text-align:right">
      <div style="font-size:24px;font-weight:800">${r.score.total}</div>
      <div class="xsmall">Fit score ${badge}</div>
    </div>`;
  wrap.appendChild(head);

  const ul=document.createElement('ul'); ul.className='list small'; ul.style.marginTop='8px';
  r.bullets.forEach(b=>{ const li=document.createElement('li'); li.textContent=b; ul.appendChild(li) });
  wrap.appendChild(ul);

  const pillbar=document.createElement('div'); pillbar.className='pillbar'; pillbar.style.marginTop='8px';
  (r.agent.propertyTypes||[]).forEach(t=>{ const s=document.createElement('span'); s.className='pill'; s.textContent=t; pillbar.appendChild(s) });
  const f=document.createElement('span'); f.className='pill'; f.textContent=(r.agent.focus||'').toLowerCase()+' focus'; pillbar.appendChild(f);
  wrap.appendChild(pillbar);

  const actions=document.createElement('div'); actions.style.display='flex'; actions.style.gap='10px'; actions.style	marginTop='10px';
  const btnChat=document.createElement('button'); btnChat.className='btn'; btnChat.textContent='Open anonymous chat';
  const btnSave=document.createElement('button'); btnSave.className='btn btn-outline'; btnSave.textContent='Save for later';
  actions.appendChild(btnChat); actions.appendChild(btnSave); wrap.appendChild(actions);
  btnChat.onclick=()=>openChat(r.agent);

  const note=document.createElement('div'); note.className='xsmall'; note.style.marginTop='6px'; note.textContent='No names or contact details shown. If both sides opt-in, we’ll connect you directly.';
  wrap.appendChild(note);
  return wrap
}
function renderAgentSmall(r){
  const wrap=document.createElement('div'); wrap.className='card'; wrap.style.padding='12px';
  const head=document.createElement('div'); head.style.display='flex'; head.style.justifyContent='space-between';
  head.innerHTML=`<div class="small" style="font-weight:700;display:flex;align-items:center;gap:8px;">${createRankBadge(r.score.total,{size:34})}${r.agent.alias}</div><div class="small" style="font-weight:700">${r.score.total}</div>`;
  wrap.appendChild(head);
  const ul=document.createElement('ul'); ul.className='list xsmall'; ul.style	marginTop='6px';
  r.bullets.slice(0,3).forEach(b=>{ const li=document.createElement('li'); li.textContent=b; ul.appendChild(li) });
  const btn=document.createElement('button'); btn.className='btn'; btn.style.width='100%'; btn.style.marginTop='8px'; btn.textContent='Chat anonymously';
  btn.onclick=()=>openChat(r.agent); wrap.appendChild(ul); wrap.appendChild(btn);
  return wrap
}

/* ===== Narrative: facts-only ===== */
const BANNED = /\b(pro|expert|specialist|strategist|guru|rockstar|top-notch|premier|award-winning|guide)\b/i;
function buildNarrative(agent, answers){
  const out=[];
  if (answers.location){
    const matchAreas=(agent.neighborhoods||[]).filter(n=>n.toLowerCase().includes((answers.location||'').toLowerCase()));
    if(matchAreas.length) out.push(`Closed ${(agent.transactions12m||0)} transactions near ${matchAreas.slice(0,2).join(', ')} in the past 12 months.`);
  } else if (agent.transactions12m>0){
    out.push(`Closed ${agent.transactions12m} transactions in the past 12 months.`);
  }
  if (answers.propertyType && (agent.propertyTypes||[]).includes(answers.propertyType)){
    out.push(`Handles ${answers.propertyType.toLowerCase()} transactions.`);
  }
  if (agent.priceMin && agent.priceMax){
    out.push(`Active price range: $${agent.priceMin.toLocaleString()}–$${agent.priceMax.toLocaleString()}.`);
  }
  if (answers.role==='Seller'){
    if (agent.domVsArea!==undefined && agent.domVsArea!==null) out.push(`Median DOM vs area: ${agent.domVsArea} days (negative is faster).`);
    if (agent.spLpVsArea!==undefined && agent.spLpVsArea!==null) out.push(`Sale-to-list vs area: ${agent.spLpVsArea}% (positive favors seller).`);
  } else {
    if (agent.buyDiscountVsArea!==undefined && agent.buyDiscountVsArea!==null) out.push(`Buyer price delta vs area: ${agent.buyDiscountVsArea}% (negative favors buyer).`);
  }
  return out.filter(Boolean).filter(line=>!BANNED.test(line)).slice(0,5);
}

/* ===== Chat (wrap with privacy gate) ===== */
const modal=document.getElementById('chat-modal'); const chatClose=document.getElementById('chat-close'); const chatSend=document.getElementById('chat-send');
function openChat(agent){
  // Privacy gate: require PLID first
  const store = JSON.parse(localStorage.getItem('agent_ranks') || '{}');
  if(!(store.plid && store.client && store.client.verified)){
    showPrivacyGate();
    const handler = async (e)=>{
      e.preventDefault();
      const plid = await getOrCreatePLID(); if(!plid) return;
      hidePrivacyGate(); _openChat(agent);
    };
    PG.form.addEventListener('submit', handler, { once:true });
    PG.cancelBtn.onclick = PG.closeBtn.onclick = ()=> hidePrivacyGate();
    PG.el.onclick = (e)=>{ if(e.target===PG.el) hidePrivacyGate(); };
    return;
  }
  _openChat(agent);
}
function _openChat(agent){
  document.getElementById('chat-title').textContent=agent.alias;
  const msgs=document.getElementById('chat-messages'); msgs.innerHTML='';
  appendMsg('system',"Anonymous chat created. Share only what you're comfortable with.");
  appendMsg(agent.alias,`Hello — happy to discuss ${(state.propertyType||'your goals').toLowerCase()} in ${state.location||'your area'}.`);
  showModal();
}
function appendMsg(who,text){
  const box=document.createElement('div'); box.className='card'; box.style.padding='8px 10px'; box.style.maxWidth='80%'; box.style.margin='6px 0';
  if(who==='You'){ box.style.marginLeft='auto'; box.style.background='#111827'; box.style.color='#fff' }
  const whoEl=document.createElement('div'); whoEl.className='xsmall'; whoEl.textContent=who;
  const textEl=document.createElement('div'); textEl.className='small'; textEl.style.marginTop='4px'; textEl.textContent=text;
  box.appendChild(whoEl); box.appendChild(textEl); const msgs=document.getElementById('chat-messages'); msgs.appendChild(box); msgs.scrollTop=msgs.scrollHeight
}
function showModal(){ modal.classList.remove('hidden'); modal.setAttribute('aria-hidden','false'); document.getElementById('chat-input').focus() }
function hideModal(){ modal.classList.add('hidden'); modal.setAttribute('aria-hidden','true') }
chatClose.onclick=hideModal;
chatSend.onclick=()=>{ const inp=document.getElementById('chat-input'); const t=(inp.value||'').trim(); if(!t) return; appendMsg('You',t); inp.value='' };
document.addEventListener('keydown',e=>{ if(e.key==='Escape') hideModal() });

/* ===== CSV Import — Worker parser ===== */
const fileInput=document.getElementById('csv-file'); const fileNote=document.getElementById('file-note');
const txt=document.getElementById('csv-text'); const statusEl=document.getElementById('status');
const thead=document.getElementById('thead'); const tbody=document.getElementById('tbody'); const errbody=document.getElementById('errbody');
document.getElementById('btn-load-sample').onclick=()=>{ txt.value = txt.getAttribute('placeholder'); statusEl.textContent='Sample loaded.' };
fileInput.onchange=async (e)=>{ const f=e.target.files?.[0]; if(!f) return; fileNote.textContent='Selected: '+f.name; const t=await f.text(); txt.value=t; statusEl.textContent='File loaded. Click Import.' };

document.getElementById('btn-import').onclick=()=>{
  const text = (txt.value||'').trim();
  if(!text){ statusEl.textContent='Paste or upload a CSV/TSV first.'; return; }
  tbody.innerHTML=''; thead.innerHTML=''; errbody.innerHTML=''; statusEl.textContent='Parsing…';
  const delim = (text.slice(0,1000).match(/\t/g)||[]).length > (text.slice(0,1000).match(/,/g)||[]).length ? '\t' : ',';
  worker.postMessage({ text, delim });
};

const workerCode = `
self.onmessage = (e) => {
  const { text, delim } = e.data;
  const lines = splitRows(text);
  const out = [];
  const errors = [];
  let header = null;
  for(let i=0;i<lines.length;i++){
    const row = parseCSVLine(lines[i], delim);
    if(i===0){ header = row; out.push(row); continue; }
    if(row.length !== header.length){
      errors.push({ idx:i+1, msg:'Column count mismatch ('+row.length+' != '+header.length+')', sample:lines[i].slice(0,140) });
      continue;
    }
    out.push(row);
    if(i % 200 === 0){ self.postMessage({ type:'progress', done:i, total:lines.length }); }
  }
  self.postMessage({ type:'done', header, rows: out.slice(1), errors });
};
function splitRows(text){
  const rows=[]; let cur='', inQuotes=false;
  for(let i=0;i<text.length;i++){
    const c=text[i], n=text[i+1];
    if(c === '"'){ if(inQuotes && n === '"'){ cur+='"'; i++; } else { inQuotes = !inQuotes; } }
    else if(c === '\\n' && !inQuotes){ rows.push(cur); cur=''; }
    else if(c === '\\r' && n === '\\n' && !inQuotes){ rows.push(cur); cur=''; i++; }
    else { cur += c; }
  }
  if(cur) rows.push(cur);
  return rows.filter(r => r.length>0);
}
function parseCSVLine(line, delim){
  const d=delim; const res=[]; let cur='', inQuotes=false;
  for(let i=0;i<line.length;i++){
    const c=line[i], n=line[i+1];
    if(c === '"'){ if(inQuotes && n === '"'){ cur+='"'; i++; } else { inQuotes = !inQuotes; } }
    else if(c === d && !inQuotes){ res.push(cur); cur=''; }
    else { cur += c; }
  }
  res.push(cur);
  return res.map(s => s.trim());
}
`;
const worker = new Worker(URL.createObjectURL(new Blob([workerCode], {type:'application/javascript'})));
worker.onmessage = (e)=>{
  const { type } = e.data;
  if(type === 'progress'){
    const { done, total } = e.data;
    statusEl.textContent = 'Parsing… ' + done + '/' + total + ' lines';
  } else if(type === 'done'){
    const { header, rows, errors } = e.data;
    renderPreview(header, rows); renderErrors(errors);
    const mapped = mapRowsToAgents(header, rows);
    if(mapped){
      AGENTS = mapped; statusEl.textContent = 'Done. Rows: '+rows.length+' | Errors: '+errors.length+'. Matches now use your data.';
      document.getElementById('results').classList.remove('hidden'); renderResults(); location.hash='#results';
    }
  }
};
function renderPreview(header, rows){
  thead.innerHTML=''; const tr = document.createElement('tr');
  header.forEach(h=>{ const th=document.createElement('th'); th.className='xsmall'; th.textContent=h; tr.appendChild(th); });
  thead.appendChild(tr);
  tbody.innerHTML=''; const maxPreview=Math.min(500, rows.length);
  for(let i=0;i<maxPreview;i++){
    const rtr=document.createElement('tr');
    rows[i].forEach(cell=>{ const td=document.createElement('td'); td.className='xsmall'; td.textContent=cell; rtr.appendChild(td); });
    tbody.appendChild(rtr);
  }
}
function renderErrors(errs){
  errbody.innerHTML=''; errs.forEach(e=>{
    const tr=document.createElement('tr');
    const td1=document.createElement('td'); td1.className='xsmall'; td1.textContent = e.idx;
    const td2=document.createElement('td'); td2.className='xsmall'; td2.textContent = e.msg;
    const td3=document.createElement('td'); td3.className='xsmall'; td3.textContent = e.sample;
    tr.append(td1,td2,td3); errbody.appendChild(tr);
  });
}
function mapRowsToAgents(header, rows){
  const idx = Object.fromEntries(header.map((h,i)=>[h,i]));
  const need = ['id','alias','neighborhoods','propertyTypes','priceMin','priceMax','focus','marketing','negotiation','transactions12m','resources','brokerageMarketing','domVsArea','spLpVsArea','buyDiscountVsArea'];
  for(const h of need){ if(!(h in idx)){ statusEl.textContent='Import error: missing header: '+h; return null; } }
  const toList = v => v ? v.split(/;|\|/).map(x=>x.trim()).filter(Boolean) : [];
  const out=[];
  for(let r=0;r<rows.length;r++){
    const cols = rows[r]; if(cols.length !== header.length) continue;
    const get = h => cols[idx[h]] ?? '';
    out.push({
      id: get('id')||('R'+(r+1)), alias: get('alias')||('Agent '+(r+1)),
      neighborhoods: toList(get('neighborhoods')), propertyTypes: toList(get('propertyTypes')),
      priceMin: parseFloat(get('priceMin')||0), priceMax: parseFloat(get('priceMax')||0),
      focus: (get('focus')||'Seller').trim(), marketing: parseInt(get('marketing')||3), negotiation: parseInt(get('negotiation')||3),
      transactions12m: parseInt(get('transactions12m')||0), resources: toList(get('resources')), brokerageMarketing: parseInt(get('brokerageMarketing')||3),
      domVsArea: parseFloat(get('domVsArea')||0), spLpVsArea: parseFloat(get('spLpVsArea')||0), buyDiscountVsArea: parseFloat(get('buyDiscountVsArea')||0),
      agreementSigned: (('agreementSigned' in idx) ? get('agreementSigned') : 'Yes')
    });
  }
  return out;
}

/* Init */
document.getElementById('year').textContent=new Date().getFullYear();
</script>
</body>
</html>
